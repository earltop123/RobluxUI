--#region EXPLOIT
getgenv().autoTap = false;
getgenv().autoRB = false;
getgenv().autoBuyPetCommon = false;
getgenv().autoBuyPetUncommonWithDelete = false;



--auto Click
function DoTap()

    spawn(function()
        while autoTap == true do
            game:GetService("ReplicatedStorage").Remotes:FindFirstChild("\226\154\161\240\159\150\177\239\184\143"):
                FireServer()
            wait()
        end
    end)
end

--DoTap()


--auto Rebirth
function AutoRb(rbAmount)

    spawn(function()
        while autoRB == true do
            local args = {
                [1] = rbAmount
            }
            game:GetService("ReplicatedStorage").Remotes:FindFirstChild("\226\154\161\239\184\189"):FireServer(unpack(args))
            wait()
        end
    end)
end

--AutoRb("9");


--Buy Egg func Common
function AutoBuyEgg(eggLimit)
    spawn(function()
        local iteriation = 0;
        while wait() do
            if not autoBuyPet or iteriation == eggLimit then break end
            ;local args = {
                [1] = workspace.PromptEgg.Legendary,
                [2] = "E"
            }
            game:GetService("ReplicatedStorage").Remotes:FindFirstChild("\226\154\161\240\159\165\154"):InvokeServer(unpack(args))
            iteriation = iteriation + 1;
        end
    end)
end

--AutoBuyEgg(43);

--autobuyegg Uncommon
function AutoBuyEggWithDelete()
    spawn(function()

        while wait() do
            if not autoBuyPetUncommonWithDelete then break end
            ;local args = {
                [1] = workspace.PromptEgg.Angelical,
                [2] = "E"
            }

            game:GetService("ReplicatedStorage").Remotes:FindFirstChild("\226\154\161\240\159\165\154"):InvokeServer(unpack(args))


            local args = {
                [1] = "EnterNameOfPet",
                [2] = "Delete"
            }

            game:GetService("ReplicatedStorage").Remotes:FindFirstChild("\226\154\161\240\159\144\177"):InvokeServer(unpack(args))

            local args = {
                [1] = "EnterNameOfPet",
                [2] = "Delete"
            }

            game:GetService("ReplicatedStorage").Remotes:FindFirstChild("\226\154\161\240\159\144\177"):InvokeServer(unpack(args))

            local args = {
                [1] = "EnterNameOfPet",
                [2] = "Delete"
            }

            game:GetService("ReplicatedStorage").Remotes:FindFirstChild("\226\154\161\240\159\144\177"):InvokeServer(unpack(args))

        end
    end)
end

--AutoBuyEggWithDelete();

function GetCurrentPos()
    local plyr = game.Players.LocalPlayer;
    if plyr.Character then
        return plyr.Character.HumanoidRootPart.Position;
    end
    return false
end

function TeleportFunc(placeCFrame)
    --local player Variable
    local plyr = game.Players.LocalPlayer;
    --checks if character is alive or is character exist
    if plyr.Character then
        --access the player CFram thru HumanoidRootPart
        plyr.Character.HumanoidRootPart.CFrame = placeCFrame;
    end
end

--TeleportFunc(game:GetService("Workspace").Portals["Russo Island"].TP.CFrame);
function IslandTeleporter(island)
    --checks if island does exsit on workspace.portals
    if (game:GetService("Workspace").Portals:FindFirstChild(island)) then
        --if it exist call teleportfunction
        TeleportFunc(game:GetService("Workspace").Portals[island].TP.CFrame);

        --if not exist print error
    else print("Island doesnt exist. Please double check the name on DEX")

    end
end

--pass arg name of the island
--IslandTeleporter("Mythical Island");
--#endregion
--#region UI

local library = loadstring(game:HttpGet(('https://raw.githubusercontent.com/bloodball/-back-ups-for-libs/main/wall%20v3'
    )))()

local w = library:CreateWindow("Simple Auto Click") -- Creates the window

local b = w:CreateFolder("Auto Click") -- Creates the folder(U will put here your buttons,etc)
b:Toggle("Auto Click Farm", function(bool)
    getgenv().autoTap = bool;
    DoTap();
end)

local c = w:CreateFolder("Auto Rebirth")
local rbAmount;
    c:Dropdown("Choose Rebirth Number", {"1","2","3","4","5","6","7","8","9","10","11","12","13","14","15"}, true,function(rbnumber) --true/false, replaces the current title "Dropdown" with the option that t
        rbAmount = rbnumber;
        end)
    c:Toggle("Auto Rebirth", function(bool)
        getgenv().autoRB = bool;
        if bool and rbAmount then 
            AutoRb(rbAmount);
        end
    end)





local selectedIslands;
local d = w:CreateFolder("Teleport")
    d:Dropdown("Choose Islands", { "Crystal Island", "Vulcan Island", "Forest Island", "Angel Island", "Myhical Island", "Hacker Island", "Russo Island"}, true,function(islands) --true/false, replaces the current title "Dropdown" with the option that t
        selectedIslands = islands;
        end)
    
    d:Button("Click to Teleport",function()
        if selectedIslands then
        IslandTeleporter(selectedIslands);
        end
        
    end)



local e = w:CreateFolder("Exit Cheat")
e:DestroyGui()




-- b:Label("Pretty Useless NGL", {
--     TextSize = 25; -- Self Explaining
--     TextColor = Color3.fromRGB(255, 255, 255); -- Self Explaining
--     BgColor = Color3.fromRGB(69, 69, 69); -- Self Explaining

-- })


-- b:Slider("Slider", {
--     min = 10; -- min value of the slider
--     max = 50; -- max value of the slider
--     precise = true; -- max 2 decimals
-- }, function(value)
--     print(value)
-- end)

-- b:Dropdown("Dropdown", { "A", "B", "C" }, true,
--     function(mob) --true/false, replaces the current title "Dropdown" with the option that t
--         print(mob)
--     end)

-- b:Bind("Bind", Enum.KeyCode.C, function() --Default bind
--     print("Yes")
-- end)

-- b:ColorPicker("ColorPicker", Color3.fromRGB(255, 0, 0), function(color) --Default color
--     print(color)
-- end)

-- b:Box("Box", "number", function(value) -- "number" or "string"
--     print(value)
-- end)



--[[
How to refresh a dropdown:
1)Create the dropdown and save it in a variable
local yourvariable = b:Dropdown("Hi",yourtable,function(a)
    print(a)
end)
2)Refresh it using the function
yourvariable:Refresh(yourtable)
How to refresh a label:
1)Create your label and save it in a variable
local yourvariable = b:Label("Pretty Useless NGL",{
    TextSize = 25; -- Self Explaining
    TextColor = Color3.fromRGB(255,255,255);
    BgColor = Color3.fromRGB(69,69,69);
})
2)Refresh it using the function
yourvariable:Refresh("Hello") It will only change the text ofc
]]
--#endregion
